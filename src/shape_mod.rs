use bevy::prelude::*;
use bevy_rapier2d::prelude::*;
use bevy_prototype_lyon::entity::ShapeBundle;
use bevy_prototype_lyon::prelude::*;

use crate::bundle::*;
use crate::component::*;
use crate::RAPIER_TO_LYON;
use Type::*;

#[derive(Copy, Clone, Hash, Eq, PartialEq, PartialOrd)]
#[derive(Debug)]
pub enum Type {
    Empty,
    Square,
    Circle,
    Rect,
    Triangle,
    Heart,
    Rust
}

pub enum Usage {
    World,
    Storage,
}

use std::cmp::Ordering;
impl Ord for Type {
    fn cmp(&self, other: &Self) -> Ordering {
        if self < other {
            Ordering::Less
        } else if self > other {
            Ordering::Greater
        } else {
            Ordering::Equal
        }
    }
}

pub static BASIC: &'static [Type] = &[
    Square, Circle, Triangle
];

pub static SHAPES: &'static [fn(Usage) -> ShapeBundle] = &[
    empty_shape,
    square_shape,
    circle_shape,
    rect_shape,
    triangle_shape,
    heart_shape,
    rust_shape,
];

pub static OBJECTS: &'static [fn(Vec2) -> ObjectBundle] = &[
    empty,
    square,
    circle,
    rect,
    triangle,
    heart,
    rust
];

pub static SCALE: &'static [f32] = &[
    0.0,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    0.1
];

pub fn init_table() -> Vec<(Vec<(Type, usize)>, Type)> {
    let table = vec![
        (vec![(Square, 2)], Rect),
        // (vec![(Circle, 3)], Heart),
        (vec![(Circle, 2), (Triangle, 1)], Heart),
        (vec![(Heart, 2)], Rust)
    ];
    table
}

pub fn empty_shape(_: Usage) -> ShapeBundle {
    ShapeBundle::default()
}

pub fn empty(_: Vec2) -> ObjectBundle {
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Empty),
        shape: empty_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            ..Default::default()
        },
        collider: ColliderBundle {
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

pub fn square_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.5,
    };
    let shape = shapes::Rectangle {
        extents: Vec2::new(2.0, 2.0) * 2.0 * RAPIER_TO_LYON * scale,
        origin: RectangleOrigin::Center
    };
    GeometryBuilder::build_as(
        &shape,
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(60.0, 1.0, 0.6)),
            outline_mode: StrokeMode::new(Color::hsl(60.0, 1.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn square(pos: Vec2) -> ObjectBundle {
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Square),
        shape: square_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::cuboid(2.0, 2.0).into(),
            mass_properties: ColliderMassProps::Density(0.4).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

pub fn circle_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.5,
    };
    let shape = shapes::Circle {
        radius: 2.5 * RAPIER_TO_LYON * scale,
        center: Vec2::new(0.0, 0.0).clone(),
    };
    GeometryBuilder::build_as(
        &shape,
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(4.0, 1.0, 0.6)),
            outline_mode: StrokeMode::new(Color::hsl(4.0, 1.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn circle(pos: Vec2) -> ObjectBundle {
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Circle),
        shape: circle_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::ball(2.5).into(),
            mass_properties: ColliderMassProps::Density(0.4).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

pub fn rect_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.3,
    };
    let shape = shapes::Rectangle {
        extents: Vec2::new(4.0, 2.0) * 2.0 * RAPIER_TO_LYON * scale,
        origin: RectangleOrigin::Center
    };
    GeometryBuilder::build_as(
        &shape,
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(60.0, 1.0, 0.6)),
            outline_mode: StrokeMode::new(Color::hsl(60.0, 1.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn rect(pos: Vec2) -> ObjectBundle {
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Rect),
        shape: rect_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::cuboid(4.0, 2.0).into(),
            mass_properties: ColliderMassProps::Density(0.4).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

fn triangle_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.4,
    };
    let svg_path_string = match usage {
        Usage::World => "M -15 -26 L -15 26 L 30 0 L -15 -26 L -15 26".to_owned(),
        Usage::Storage => "M -6 -10.4 L -6 10.4 L 12 0 L -6 -10.4 L -6 10.4".to_owned(),
    };
    GeometryBuilder::build_as(
        &shapes::SvgPathShape {
            svg_path_string,
            svg_doc_size_in_px: Vec2::new(0.,0.)
        },
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(200.0, 1.0, 0.6)),
            outline_mode: StrokeMode::new(Color::hsl(200.0, 1.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn triangle(pos: Vec2) -> ObjectBundle {
    let a = (3.0 as f32).sqrt();
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Triangle),
        shape: triangle_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::triangle(
                point![-1.5, 1.5 * a], point![-1.5, -1.5 * a], point![3.0, 0.0]
            ).into(),
            // shape: ColliderShape::cuboid()
            mass_properties: ColliderMassProps::Density(0.4).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

fn heart_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.3,
    };
    let svg_path_string = match usage {
        Usage::World => "M 6.476 31.244 C 37.726 37.494 37.726 -0.006 12.726 -0.006 C 37.726 -0.006 37.726 -37.506 6.476 -31.256 C -12.274 -25.006 -18.524 -6.256 -37.274 -0.006 C -18.524 6.244 -12.274 24.994 6.476 31.244".to_owned(),
        Usage::Storage => "M 12.5 -2.5 C 15 -15 0 -15 0 -5 C 0 -15 -15 -15 -12.5 -2.5 C -10 5 -2.5 7.5 0 15 C 2.5 7.5 10 5 12.5 -2.5".to_owned(),
    };
    let shape = shapes::SvgPathShape {
        svg_path_string,
        svg_doc_size_in_px: Vec2::new(0., 0.)
    };
    GeometryBuilder::build_as(
        &shape,
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(344.0, 1.0, 0.6)),
            outline_mode: StrokeMode::new(Color::hsl(344.0, 1.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn heart(pos: Vec2) -> ObjectBundle {
    use nalgebra::Isometry2;
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Heart),
        shape: heart_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::compound(vec![
                (Isometry2::translation(1.5, 1.6), ColliderShape::ball(1.6)),
                (Isometry2::translation(1.5, -1.6), ColliderShape::ball(1.6)),
                (Isometry::translation(0.0, 0.0), ColliderShape::triangle(
                    point![0.6, -3.1], point![0.6, 3.1], point![-3.8, 0.0]
                ))
            ]
            ).into(),
            // (15, 16) 16, (-15, 16) 16, [(6, -31), (6, 31), (-38, 0)]
            mass_properties: ColliderMassProps::Density(0.4).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}

fn rust_shape(usage: Usage) -> ShapeBundle {
    let scale = match usage {
        Usage::World => 1.0,
        Usage::Storage => 0.3,
    };
    let svg_path_string = match usage {
        Usage::World => "M 51.6 -1.3 L 47.21 -4.02 C 47.173 -4.448 47.131 -4.875 47.085 -5.3 L 50.865 -8.82 C 51.249 -9.178 51.421 -9.708 51.317 -10.22 C 51.216 -10.735 50.855 -11.159 50.364 -11.34 L 45.534 -13.14 C 45.413 -13.558 45.286 -13.973 45.156 -14.39 L 48.166 -18.57 C 48.473 -18.995 48.536 -19.548 48.336 -20.03 C 48.136 -20.513 47.699 -20.859 47.186 -20.944 L 42.096 -21.772 C 41.898 -22.158 41.692 -22.538 41.484 -22.912 L 43.624 -27.612 C 43.843 -28.09 43.798 -28.642 43.506 -29.082 C 43.215 -29.518 42.722 -29.773 42.196 -29.753 L 37.026 -29.573 C 36.759 -29.907 36.487 -30.238 36.21 -30.563 L 37.4 -35.593 C 37.52 -36.104 37.369 -36.643 36.997 -37.013 C 36.628 -37.383 36.092 -37.536 35.577 -37.416 L 30.547 -36.226 C 30.221 -36.502 29.89 -36.775 29.555 -37.042 L 29.736 -42.212 C 29.756 -42.735 29.501 -43.232 29.065 -43.522 C 28.628 -43.814 28.075 -43.858 27.595 -43.641 L 22.905 -41.501 C 22.526 -41.709 22.146 -41.915 21.765 -42.114 L 20.935 -47.204 C 20.851 -47.72 20.505 -48.158 20.021 -48.354 C 19.538 -48.555 18.981 -48.49 18.561 -48.184 L 14.381 -45.174 C 13.969 -45.305 13.555 -45.431 13.141 -45.551 L 11.341 -50.381 C 11.158 -50.873 10.734 -51.234 10.221 -51.336 C 9.707 -51.437 9.181 -51.266 8.821 -50.884 L 5.301 -47.104 C 4.876 -47.151 4.448 -47.194 4.021 -47.229 L 1.301 -51.629 C 1.026 -52.074 0.539 -52.345 0.011 -52.345 S -0.999 -52.074 -1.269 -51.629 L -3.989 -47.229 C -4.417 -47.194 -4.845 -47.151 -5.269 -47.104 L -8.789 -50.884 C -9.146 -51.266 -9.676 -51.437 -10.189 -51.336 C -10.704 -51.233 -11.128 -50.873 -11.309 -50.381 L -13.109 -45.551 C -13.527 -45.431 -13.941 -45.304 -14.349 -45.174 L -18.529 -48.184 C -18.954 -48.491 -19.508 -48.556 -19.989 -48.354 C -20.472 -48.154 -20.819 -47.716 -20.903 -47.204 L -21.733 -42.114 C -22.117 -41.915 -22.497 -41.71 -22.873 -41.501 L -27.563 -43.641 C -28.04 -43.859 -28.593 -43.814 -29.033 -43.522 C -29.469 -43.232 -29.724 -42.735 -29.704 -42.212 L -29.524 -37.042 C -29.858 -36.775 -30.189 -36.502 -30.516 -36.226 L -35.546 -37.416 C -36.057 -37.535 -36.596 -37.383 -36.966 -37.013 C -37.338 -36.642 -37.489 -36.107 -37.369 -35.593 L -36.189 -30.563 C -36.464 -30.237 -36.736 -29.907 -37.003 -29.573 L -42.173 -29.753 C -42.694 -29.768 -43.193 -29.518 -43.483 -29.082 C -43.775 -28.648 -43.819 -28.092 -43.602 -27.612 L -41.462 -22.912 C -41.67 -22.535 -41.876 -22.155 -42.075 -21.772 L -47.165 -20.944 C -47.682 -20.86 -48.118 -20.514 -48.315 -20.03 C -48.515 -19.545 -48.45 -18.99 -48.145 -18.57 L -45.135 -14.39 C -45.266 -13.977 -45.393 -13.562 -45.513 -13.14 L -50.343 -11.34 C -50.833 -11.157 -51.194 -10.733 -51.296 -10.22 C -51.398 -9.706 -51.227 -9.18 -50.844 -8.82 L -47.064 -5.3 C -47.111 -4.875 -47.153 -4.447 -47.189 -4.02 L -51.579 -1.3 C -52.024 -1.025 -52.295 -0.539 -52.295 -0.01 S -52.024 1 -51.579 1.27 L -47.189 3.99 C -47.153 4.418 -47.111 4.845 -47.064 5.27 L -50.844 8.79 C -51.227 9.147 -51.398 9.677 -51.296 10.19 C -51.194 10.705 -50.833 11.128 -50.343 11.31 L -45.513 13.11 C -45.393 13.528 -45.266 13.943 -45.135 14.36 L -48.145 18.54 C -48.451 18.966 -48.516 19.519 -48.315 20 C -48.114 20.485 -47.677 20.831 -47.155 20.914 L -42.065 21.742 C -41.866 22.128 -41.662 22.508 -41.452 22.882 L -43.592 27.572 C -43.81 28.049 -43.765 28.602 -43.473 29.042 C -43.181 29.479 -42.684 29.734 -42.163 29.713 L -37.003 29.532 C -36.734 29.868 -36.463 30.197 -36.187 30.524 L -37.367 35.554 C -37.487 36.064 -37.336 36.594 -36.964 36.964 C -36.595 37.337 -36.058 37.486 -35.544 37.366 L -30.514 36.186 C -30.187 36.464 -29.856 36.734 -29.522 37 L -29.702 42.17 C -29.722 42.693 -29.467 43.19 -29.031 43.48 C -28.597 43.771 -28.041 43.815 -27.561 43.597 L -22.871 41.457 C -22.493 41.667 -22.113 41.871 -21.731 42.07 L -20.901 47.16 C -20.817 47.678 -20.471 48.116 -19.987 48.32 C -19.504 48.521 -18.947 48.456 -18.527 48.151 L -14.347 45.141 C -13.934 45.272 -13.519 45.4 -13.097 45.52 L -11.297 50.35 C -11.114 50.84 -10.69 51.203 -10.177 51.303 C -9.663 51.407 -9.137 51.235 -8.777 50.851 L -5.257 47.071 C -4.832 47.12 -4.404 47.161 -3.977 47.199 L -1.257 51.589 C -0.983 52.032 -0.496 52.305 0.023 52.305 S 1.033 52.033 1.313 51.589 L 4.033 47.199 C 4.461 47.161 4.888 47.12 5.313 47.071 L 8.833 50.851 C 9.19 51.235 9.72 51.407 10.233 51.303 C 10.748 51.202 11.172 50.84 11.353 50.35 L 13.153 45.52 C 13.571 45.4 13.986 45.272 14.403 45.141 L 18.583 48.151 C 19.008 48.456 19.562 48.521 20.043 48.32 C 20.527 48.121 20.873 47.682 20.957 47.16 L 21.787 42.07 C 22.171 41.871 22.551 41.664 22.927 41.457 L 27.617 43.597 C 28.094 43.815 28.647 43.771 29.087 43.48 C 29.523 43.188 29.777 42.693 29.758 42.17 L 29.578 37 C 29.912 36.733 30.243 36.464 30.569 36.186 L 35.599 37.366 C 36.11 37.486 36.649 37.337 37.019 36.964 C 37.391 36.593 37.542 36.06 37.422 35.554 L 36.242 30.524 C 36.518 30.197 36.79 29.868 37.056 29.532 L 42.226 29.713 C 42.747 29.734 43.246 29.479 43.536 29.042 C 43.828 28.606 43.873 28.051 43.654 27.572 L 41.514 22.882 C 41.723 22.503 41.928 22.123 42.126 21.742 L 47.216 20.914 C 47.734 20.831 48.17 20.485 48.366 20 C 48.566 19.517 48.503 18.96 48.196 18.54 L 45.186 14.36 C 45.316 13.947 45.443 13.532 45.564 13.11 L 50.394 11.31 C 50.885 11.126 51.247 10.703 51.347 10.19 C 51.451 9.676 51.279 9.15 50.895 8.79 L 47.115 5.27 C 47.161 4.845 47.203 4.417 47.24 3.99 L 51.63 1.27 C 52.075 0.996 52.346 0.509 52.346 -0.01 S 52.076 -1.02 51.631 -1.3 Z M 22.2 35.2 C 20.52 34.838 19.46 33.18 19.82 31.5 C 20.179 29.82 21.83 28.75 23.51 29.11 C 25.19 29.469 26.26 31.13 25.9 32.81 S 23.89 35.56 22.21 35.2 Z M 20.71 25.1 C 19.18 24.772 17.67 25.746 17.35 27.28 L 15.79 34.56 C 10.98 36.74 5.59 37.96 -0.01 37.96 C -5.77 37.96 -11.21 36.69 -16.11 34.41 L -17.67 27.13 C -17.998 25.6 -19.5 24.62 -21.03 24.95 L -27.46 26.33 C -28.65 25.1 -29.76 23.79 -30.78 22.41 H 0.52 C 0.874 22.41 1.11 22.346 1.11 22.024 V 10.924 C 1.11 10.602 0.874 10.538 0.52 10.538 H -8.63 V 3.528 H 1.26 C 2.163 3.528 6.09 3.786 7.34 8.808 C 7.733 10.348 8.6 15.368 9.19 16.978 C 9.778 18.778 12.17 22.378 14.72 22.378 H 30.32 C 30.497 22.378 30.686 22.358 30.885 22.322 C 29.805 23.792 28.615 25.182 27.345 26.482 L 20.765 25.072 Z M -22.59 35.05 C -24.27 35.412 -25.92 34.342 -26.28 32.66 C -26.639 30.98 -25.572 29.32 -23.89 28.96 C -22.21 28.601 -20.56 29.671 -20.2 31.35 C -19.841 33.03 -20.909 34.69 -22.59 35.05 Z M -34.49 -13.05 C -33.794 -11.48 -34.502 -9.64 -36.07 -8.94 C -37.64 -8.243 -39.47 -8.952 -40.17 -10.52 S -40.158 -13.93 -38.59 -14.63 C -37.02 -15.326 -35.19 -14.618 -34.49 -13.05 Z M -38.14 -4.41 L -31.44 -7.39 C -30.01 -8.025 -29.36 -9.7 -30 -11.13 L -31.38 -14.25 H -25.96 V 10.15 H -36.86 C -37.809 6.81 -38.32 3.29 -38.32 -0.35 C -38.32 -1.74 -38.245 -3.11 -38.101 -4.46 Z M -8.74 -6.78 V -13.98 H 4.16 C 4.827 -13.98 8.87 -13.209 8.87 -10.19 C 8.87 -7.68 5.77 -6.78 3.22 -6.78 H -8.78 Z M 38.16 -0.3 C 38.16 0.656 38.125 1.6 38.055 2.54 H 34.125 C 33.732 2.54 33.574 2.798 33.574 3.183 V 4.983 C 33.574 9.223 31.184 10.153 29.084 10.383 C 27.084 10.608 24.874 9.547 24.604 8.323 C 23.424 1.693 21.464 0.283 18.364 -2.177 C 22.214 -4.617 26.214 -8.227 26.214 -13.077 C 26.214 -18.287 22.644 -21.567 20.214 -23.177 C 16.794 -25.427 13.014 -25.877 11.994 -25.877 H -28.606 C -23.096 -32.017 -15.606 -36.377 -7.206 -37.977 L -2.416 -32.957 C -1.336 -31.827 0.454 -31.777 1.594 -32.865 L 6.954 -37.985 C 18.154 -35.895 27.654 -28.915 33.154 -19.285 L 29.484 -11.005 C 28.851 -9.575 29.497 -7.895 30.924 -7.265 L 37.984 -4.125 C 38.106 -2.875 38.17 -1.605 38.17 -0.325 Z M -2.44 -42.2 C -1.2 -43.39 0.77 -43.34 1.95 -42.099 C 3.13 -40.859 3.09 -38.889 1.847 -37.699 C 0.607 -36.509 -1.363 -36.559 -2.543 -37.801 C -3.723 -39.041 -3.683 -41.011 -2.44 -42.201 Z M 33.96 -12.9 C 34.655 -14.47 36.49 -15.18 38.06 -14.48 C 39.63 -13.784 40.34 -11.94 39.64 -10.37 C 38.945 -8.8 37.11 -8.09 35.54 -8.79 C 33.97 -9.486 33.26 -11.33 33.96 -12.9 Z".to_owned(),
        Usage::Storage => "M 15.48 -0.39 L 14.163 -1.206 C 14.1519 -1.3344 14.1393 -1.4625 14.1255 -1.59 L 15.2595 -2.646 C 15.3747 -2.7534 15.4263 -2.9124 15.3951 -3.066 C 15.3648 -3.2205 15.2565 -3.3477 15.1092 -3.402 L 13.6602 -3.942 C 13.6239 -4.0674 13.5858 -4.1919 13.5468 -4.317 L 14.4498 -5.571 C 14.5419 -5.6985 14.5608 -5.8644 14.5008 -6.009 C 14.4408 -6.1539 14.3097 -6.2577 14.1558 -6.2832 L 12.6288 -6.5316 C 12.5694 -6.6474 12.5076 -6.7614 12.4452 -6.8736 L 13.0872 -8.2836 C 13.1529 -8.427 13.1394 -8.5926 13.0518 -8.7246 C 12.9645 -8.8554 12.8166 -8.9319 12.6588 -8.9259 L 11.1078 -8.8719 C 11.0277 -8.9721 10.9461 -9.0714 10.863 -9.1689 L 11.22 -10.6779 C 11.256 -10.8312 11.2107 -10.9929 11.0991 -11.1039 C 10.9884 -11.2149 10.8276 -11.2608 10.6731 -11.2248 L 9.1641 -10.8678 C 9.0663 -10.9506 8.967 -11.0325 8.8665 -11.1126 L 8.9208 -12.6636 C 8.9268 -12.8205 8.8503 -12.9696 8.7195 -13.0566 C 8.5884 -13.1442 8.4225 -13.1574 8.2785 -13.0923 L 6.8715 -12.4503 C 6.7578 -12.5127 6.6438 -12.5745 6.5295 -12.6342 L 6.2805 -14.1612 C 6.2553 -14.316 6.1515 -14.4474 6.0063 -14.5062 C 5.8614 -14.5665 5.6943 -14.547 5.5683 -14.4552 L 4.3143 -13.5522 C 4.1907 -13.5915 4.0665 -13.6293 3.9423 -13.6653 L 3.4023 -15.1143 C 3.3474 -15.2619 3.2202 -15.3702 3.0663 -15.4008 C 2.9121 -15.4311 2.7543 -15.3798 2.6463 -15.2652 L 1.5903 -14.1312 C 1.4628 -14.1453 1.3344 -14.1582 1.2063 -14.1687 L 0.3903 -15.4887 C 0.3078 -15.6222 0.1617 -15.7035 0.0033 -15.7035 S -0.2997 -15.6222 -0.3807 -15.4887 L -1.1967 -14.1687 C -1.3251 -14.1582 -1.4535 -14.1453 -1.5807 -14.1312 L -2.6367 -15.2652 C -2.7438 -15.3798 -2.9028 -15.4311 -3.0567 -15.4008 C -3.2112 -15.3699 -3.3384 -15.2619 -3.3927 -15.1143 L -3.9327 -13.6653 C -4.0581 -13.6293 -4.1823 -13.5912 -4.3047 -13.5522 L -5.5587 -14.4552 C -5.6862 -14.5473 -5.8524 -14.5668 -5.9967 -14.5062 C -6.1416 -14.4462 -6.2457 -14.3148 -6.2709 -14.1612 L -6.5199 -12.6342 C -6.6351 -12.5745 -6.7491 -12.513 -6.8619 -12.4503 L -8.2689 -13.0923 C -8.412 -13.1577 -8.5779 -13.1442 -8.7099 -13.0566 C -8.8407 -12.9696 -8.9172 -12.8205 -8.9112 -12.6636 L -8.8572 -11.1126 C -8.9574 -11.0325 -9.0567 -10.9506 -9.1548 -10.8678 L -10.6638 -11.2248 C -10.8171 -11.2605 -10.9788 -11.2149 -11.0898 -11.1039 C -11.2014 -10.9926 -11.2467 -10.8321 -11.2107 -10.6779 L -10.8567 -9.1689 C -10.9392 -9.0711 -11.0208 -8.9721 -11.1009 -8.8719 L -12.6519 -8.9259 C -12.8082 -8.9304 -12.9579 -8.8554 -13.0449 -8.7246 C -13.1325 -8.5944 -13.1457 -8.4276 -13.0806 -8.2836 L -12.4386 -6.8736 C -12.501 -6.7605 -12.5628 -6.6465 -12.6225 -6.5316 L -14.1495 -6.2832 C -14.3046 -6.258 -14.4354 -6.1542 -14.4945 -6.009 C -14.5545 -5.8635 -14.535 -5.697 -14.4435 -5.571 L -13.5405 -4.317 C -13.5798 -4.1931 -13.6179 -4.0686 -13.6539 -3.942 L -15.1029 -3.402 C -15.2499 -3.3471 -15.3582 -3.2199 -15.3888 -3.066 C -15.4194 -2.9118 -15.3681 -2.754 -15.2532 -2.646 L -14.1192 -1.59 C -14.1333 -1.4625 -14.1459 -1.3341 -14.1567 -1.206 L -15.4737 -0.39 C -15.6072 -0.3075 -15.6885 -0.1617 -15.6885 -0.003 S -15.6072 0.3 -15.4737 0.381 L -14.1567 1.197 C -14.1459 1.3254 -14.1333 1.4535 -14.1192 1.581 L -15.2532 2.637 C -15.3681 2.7441 -15.4194 2.9031 -15.3888 3.057 C -15.3582 3.2115 -15.2499 3.3384 -15.1029 3.393 L -13.6539 3.933 C -13.6179 4.0584 -13.5798 4.1829 -13.5405 4.308 L -14.4435 5.562 C -14.5353 5.6898 -14.5548 5.8557 -14.4945 6 C -14.4342 6.1455 -14.3031 6.2493 -14.1465 6.2742 L -12.6195 6.5226 C -12.5598 6.6384 -12.4986 6.7524 -12.4356 6.8646 L -13.0776 8.2716 C -13.143 8.4147 -13.1295 8.5806 -13.0419 8.7126 C -12.9543 8.8437 -12.8052 8.9202 -12.6489 8.9139 L -11.1009 8.8596 C -11.0202 8.9604 -10.9389 9.0591 -10.8561 9.1572 L -11.2101 10.6662 C -11.2461 10.8192 -11.2008 10.9782 -11.0892 11.0892 C -10.9785 11.2011 -10.8174 11.2458 -10.6632 11.2098 L -9.1542 10.8558 C -9.0561 10.9392 -8.9568 11.0202 -8.8566 11.1 L -8.9106 12.651 C -8.9166 12.8079 -8.8401 12.957 -8.7093 13.044 C -8.5791 13.1313 -8.4123 13.1445 -8.2683 13.0791 L -6.8613 12.4371 C -6.7479 12.5001 -6.6339 12.5613 -6.5193 12.621 L -6.2703 14.148 C -6.2451 14.3034 -6.1413 14.4348 -5.9961 14.496 C -5.8512 14.5563 -5.6841 14.5368 -5.5581 14.4453 L -4.3041 13.5423 C -4.1802 13.5816 -4.0557 13.62 -3.9291 13.656 L -3.3891 15.105 C -3.3342 15.252 -3.207 15.3609 -3.0531 15.3909 C -2.8989 15.4221 -2.7411 15.3705 -2.6331 15.2553 L -1.5771 14.1213 C -1.4496 14.136 -1.3212 14.1483 -1.1931 14.1597 L -0.3771 15.4767 C -0.2949 15.6096 -0.1488 15.6915 0.0069 15.6915 S 0.3099 15.6099 0.3939 15.4767 L 1.2099 14.1597 C 1.3383 14.1483 1.4664 14.136 1.5939 14.1213 L 2.6499 15.2553 C 2.757 15.3705 2.916 15.4221 3.0699 15.3909 C 3.2244 15.3606 3.3516 15.252 3.4059 15.105 L 3.9459 13.656 C 4.0713 13.62 4.1958 13.5816 4.3209 13.5423 L 5.5749 14.4453 C 5.7024 14.5368 5.8686 14.5563 6.0129 14.496 C 6.1581 14.4363 6.2619 14.3046 6.2871 14.148 L 6.5361 12.621 C 6.6513 12.5613 6.7653 12.4992 6.8781 12.4371 L 8.2851 13.0791 C 8.4282 13.1445 8.5941 13.1313 8.7261 13.044 C 8.8569 12.9564 8.9331 12.8079 8.9274 12.651 L 8.8734 11.1 C 8.9736 11.0199 9.0729 10.9392 9.1707 10.8558 L 10.6797 11.2098 C 10.833 11.2458 10.9947 11.2011 11.1057 11.0892 C 11.2173 10.9779 11.2626 10.818 11.2266 10.6662 L 10.8726 9.1572 C 10.9554 9.0591 11.037 8.9604 11.1168 8.8596 L 12.6678 8.9139 C 12.8241 8.9202 12.9738 8.8437 13.0608 8.7126 C 13.1484 8.5818 13.1619 8.4153 13.0962 8.2716 L 12.4542 6.8646 C 12.5169 6.7509 12.5784 6.6369 12.6378 6.5226 L 14.1648 6.2742 C 14.3202 6.2493 14.451 6.1455 14.5098 6 C 14.5698 5.8551 14.5509 5.688 14.4588 5.562 L 13.5558 4.308 C 13.5948 4.1841 13.6329 4.0596 13.6692 3.933 L 15.1182 3.393 C 15.2655 3.3378 15.3741 3.2109 15.4041 3.057 C 15.4353 2.9028 15.3837 2.745 15.2685 2.637 L 14.1345 1.581 C 14.1483 1.4535 14.1609 1.3251 14.172 1.197 L 15.489 0.381 C 15.6225 0.2988 15.7038 0.1527 15.7038 -0.003 S 15.6228 -0.306 15.4893 -0.39 Z M 6.66 10.56 C 6.156 10.4514 5.838 9.954 5.946 9.45 C 6.0537 8.946 6.549 8.625 7.053 8.733 C 7.557 8.8407 7.878 9.339 7.77 9.843 S 7.167 10.668 6.663 10.56 Z M 6.213 7.53 C 5.754 7.4316 5.301 7.7238 5.205 8.184 L 4.737 10.368 C 3.294 11.022 1.677 11.388 -0.003 11.388 C -1.731 11.388 -3.363 11.007 -4.833 10.323 L -5.301 8.139 C -5.3994 7.68 -5.85 7.386 -6.309 7.485 L -8.238 7.899 C -8.595 7.53 -8.928 7.137 -9.234 6.723 H 0.156 C 0.2622 6.723 0.333 6.7038 0.333 6.6072 V 3.2772 C 0.333 3.1806 0.2622 3.1614 0.156 3.1614 H -2.589 V 1.0584 H 0.378 C 0.6489 1.0584 1.827 1.1358 2.202 2.6424 C 2.3199 3.1044 2.58 4.6104 2.757 5.0934 C 2.9334 5.6334 3.651 6.7134 4.416 6.7134 H 9.096 C 9.1491 6.7134 9.2058 6.7074 9.2655 6.6966 C 8.9415 7.1376 8.5845 7.5546 8.2035 7.9446 L 6.2295 7.5216 Z M -6.777 10.515 C -7.281 10.6236 -7.776 10.3026 -7.884 9.798 C -7.9917 9.294 -7.6716 8.796 -7.167 8.688 C -6.663 8.5803 -6.168 8.9013 -6.06 9.405 C -5.9523 9.909 -6.2727 10.407 -6.777 10.515 Z M -10.347 -3.915 C -10.1382 -3.444 -10.3506 -2.892 -10.821 -2.682 C -11.292 -2.4729 -11.841 -2.6856 -12.051 -3.156 S -12.0474 -4.179 -11.577 -4.389 C -11.106 -4.5978 -10.557 -4.3854 -10.347 -3.915 Z M -11.442 -1.323 L -9.432 -2.217 C -9.003 -2.4075 -8.808 -2.91 -9 -3.339 L -9.414 -4.275 H -7.788 V 3.045 H -11.058 C -11.3427 2.043 -11.496 0.987 -11.496 -0.105 C -11.496 -0.522 -11.4735 -0.933 -11.4303 -1.338 Z M -2.622 -2.034 V -4.194 H 1.248 C 1.4481 -4.194 2.661 -3.9627 2.661 -3.057 C 2.661 -2.304 1.731 -2.034 0.966 -2.034 H -2.634 Z M 11.448 -0.09 C 11.448 0.1968 11.4375 0.48 11.4165 0.762 H 10.2375 C 10.1196 0.762 10.0722 0.8394 10.0722 0.9549 V 1.4949 C 10.0722 2.7669 9.3552 3.0459 8.7252 3.1149 C 8.1252 3.1824 7.4622 2.8641 7.3812 2.4969 C 7.0272 0.5079 6.4392 0.0849 5.5092 -0.6531 C 6.6642 -1.3851 7.8642 -2.4681 7.8642 -3.9231 C 7.8642 -5.4861 6.7932 -6.4701 6.0642 -6.9531 C 5.0382 -7.6281 3.9042 -7.7631 3.5982 -7.7631 H -8.5818 C -6.9288 -9.6051 -4.6818 -10.9131 -2.1618 -11.3931 L -0.7248 -9.8871 C -0.4008 -9.5481 0.1362 -9.5331 0.4782 -9.8595 L 2.0862 -11.3955 C 5.4462 -10.7685 8.2962 -8.6745 9.9462 -5.7855 L 8.8452 -3.3015 C 8.6553 -2.8725 8.8491 -2.3685 9.2772 -2.1795 L 11.3952 -1.2375 C 11.4318 -0.8625 11.451 -0.4815 11.451 -0.0975 Z M -0.732 -12.66 C -0.36 -13.017 0.231 -13.002 0.585 -12.6297 C 0.939 -12.2577 0.927 -11.6667 0.5541 -11.3097 C 0.1821 -10.9527 -0.4089 -10.9677 -0.7629 -11.3403 C -1.1169 -11.7123 -1.1049 -12.3033 -0.732 -12.6603 Z M 10.188 -3.87 C 10.3965 -4.341 10.947 -4.554 11.418 -4.344 C 11.889 -4.1352 12.102 -3.582 11.892 -3.111 C 11.6835 -2.64 11.133 -2.427 10.662 -2.637 C 10.191 -2.8458 9.978 -3.399 10.188 -3.87 Z".to_owned(),
    };
    let shape = shapes::SvgPathShape {
        svg_path_string,
        svg_doc_size_in_px: Vec2::new(0., 0.)
    };
    GeometryBuilder::build_as(
        &shape,
        DrawMode::Outlined {
            fill_mode: FillMode::color(Color::hsl(347.0, 1.0, 0.03)),
            outline_mode: StrokeMode::new(Color::hsl(344.0, 0.0, 0.4), 5.0 * scale),
        },
        Transform {
            translation: Vec3::new(0.0, 0.0, 10.0),
            ..Default::default()
        },
    )
}

fn rust(pos: Vec2) -> ObjectBundle {
    use nalgebra::Isometry2;
    ObjectBundle {
        object: Object {},
        throwable: Throwable(Type::Rust),
        shape: rust_shape(Usage::World),
        rigid_body: RigidBodyBundle {
            position: (pos.clone(), 0.0).into(),
            ..Default::default()
        },
        collider: ColliderBundle {
            shape: ColliderShape::ball(5.2).into(),
            // (15, 16) 16, (-15, 16) 16, [(6, -31), (6, 31), (-38, 0)]
            mass_properties: ColliderMassProps::Density(0.1).into(),
            flags: (ActiveEvents::CONTACT_EVENTS | ActiveEvents::INTERSECTION_EVENTS).into(),
            ..Default::default()
        },
        sync: RigidBodyPositionSync::Discrete,
    }
}
